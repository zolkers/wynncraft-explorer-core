plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/we.accesswidener")
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}

	// Ajouter les métadonnées pour l'updater dans le manifest
	manifest {
		attributes([
				"Implementation-Title": "Wynncraft Explorer Core",
				"Implementation-Version": project.mod_version,
				"Main-Class": "com.edgn.Main",
				"Mod-Type": "core"
		])
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			groupId = project.maven_group           // com.edgn
			artifactId = project.archives_base_name // wynncraft-explorer
			version = project.mod_version           // 1.0.0

			// Publier les artefacts remappés (Fabric Loom)
			artifact(tasks.remapJar) { classifier = null; builtBy tasks.remapJar }
			artifact(tasks.remapSourcesJar) { builtBy tasks.remapSourcesJar }

			pom {
				name = project.archives_base_name
				description = "Core + API for EDGN extensions"
			}
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/zolkers/wynncraft-explorer-core")
			credentials {
				username = System.getenv("GITHUB_ACTOR") ?: (findProperty("gpr.user") ?: "")
				password = System.getenv("GITHUB_TOKEN") ?: (findProperty("gpr.token") ?: "")
			}
		}
	}
}

tasks.named("publish").configure {
	dependsOn(tasks.remapJar, tasks.remapSourcesJar)
}

tasks.register('publishToVPS', Exec) {
	dependsOn 'remapJar'
	group = 'publishing'
	description = 'Upload the core mod JAR to VPS for auto-updates'

	// make sure it runs after build
	mustRunAfter 'build'

	doFirst {
		def vpsToken = project.findProperty('vps_token') ?: System.getenv('VPS_TOKEN')
		if (!vpsToken) {
			throw new GradleException("VPS token not found. Set -Pvps_token=YOUR_TOKEN or VPS_TOKEN environment variable")
		}

		def jarFile = tasks.remapJar.archiveFile.get().asFile
		if (!jarFile.exists()) {
			throw new GradleException("JAR file not found: ${jarFile}")
		}

		println "Publishing CORE MOD to VPS:"
		println "  - File: ${jarFile.name}"
		println "  - Version: ${project.mod_version}"
		println "  - Size: ${jarFile.length()} bytes"
	}

	commandLine 'curl','-k','-X','POST',
			'-H',"Authorization: Bearer ${project.findProperty('vps_token') ?: System.getenv('VPS_TOKEN')}",
			'-F','mod_id=wynncraft-explorer',
			'-F',"version=${project.mod_version}",
			'-F','type=core',
			'-F',"changelog=${project.findProperty('changelog') ?: 'Core mod update'}",
			'-F',"critical=${project.findProperty('critical') ?: 'false'}",
			'-F',"file=@${tasks.remapJar.archiveFile.get().asFile.absolutePath}",
			'https://vps-14c83950.vps.ovh.net:8443/api/releases/upload'

}

tasks.register('release') {
	dependsOn 'build', 'publishToVPS'
	group = 'publishing'
	description = 'Build and publish core mod to VPS'

	doLast {
		println ""
		println "✓ CORE MOD RELEASE COMPLETED"
		println "  Version: ${project.mod_version}"
		println "  Published to VPS for auto-updates"
		println ""
	}
}

tasks.register('showBuildArtifacts') {
	group = 'help'
	description = 'Show which files will be uploaded to VPS'

	doLast {
		println "Core mod build artifacts:"
		println "  Main JAR (will be uploaded): ${tasks.remapJar.archiveFile.get().asFile}"
		println "  Sources JAR (GitHub only): ${tasks.remapSourcesJar.archiveFile.get().asFile}"
		println ""
		println "Upload command will be:"
		println "  gradle release -Pchangelog='Your changelog' -Pcritical=false"
	}
}